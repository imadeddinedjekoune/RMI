#version 400 core

in vec3 position;
in vec2 textCoord;
in vec3 normal;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;

uniform vec3 lightPosition[4];

out vec2 out_text;
out vec3 surfaceNormal;
out vec3 toLightVector[4];
out vec3 toCameraVector;
out vec3 reflectedVector;

void main(void){
	vec4 worldPosition = transformationMatrix * vec4(position,1.0); 
	gl_Position = projectionMatrix * viewMatrix * transformationMatrix * vec4(position, 1.0);
	out_text = textCoord;
	surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;
	for (int i = 0; i < 4; i++) {
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
	
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
	
	vec3 cameraPosition = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz ;
	vec3 viewVector = normalize(worldPosition.xyz - cameraPosition );
	vec3 unitNormal = normalize(normal);
	reflectedVector = reflect(viewVector,unitNormal);
}